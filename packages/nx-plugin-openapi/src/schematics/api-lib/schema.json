{
  "$schema": "http://json-schema.org/draft-07/schema",
  "id": "api-lib",
  "title": "Create a lib to generate sources from an OpenAPI specification file",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use?",
      "pattern": "^[a-zA-Z]{1}.*$"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the project (used for linting)",
      "alias": "t"
    },
    "directory": {
      "type": "string",
      "description": "A directory where the project is placed",
      "alias": "d"
    },
    "isRemoteSpec": {
      "type": "boolean",
      "description": "",
      "alias": "r",
      "x-prompt": "Is the API spec file published online?",
      "default": false
    },
    "sourceSpecUrl": {
      "type": "string",
      "description": "",
      "alias": "u",
      "x-prompt": "If it's online, what's the URL where I can get the API spec file from?"
    },
    "sourceSpecUrlAuthorizationHeaders": {
      "type": "string",
      "description": "A URL-encoded string of name:header with a comma separating multiple values",
      "alias": "a",
      "x-prompt": "If it's online, which authorization headers do you need to add?"
    },
    "sourceSpecLib": {
      "type": "string",
      "description": "The workspace lib where the source OpenAPI spec file is located (Es: api-spec)",
      "alias": "l",
      "x-prompt": "If it's local, what's the name of the lib containing the API spec file?"
    },
    "sourceSpecFileRelativePath": {
      "type": "string",
      "description": "The name of the source OpenAPI spec file, and its path relative to the root of the `sourceSpecLib` project (Es: src/api-spec.openapi.yml)",
      "alias": "f",
      "x-prompt": "If it's local, what's the path of the API spec file starting from the lib root?"
    },
    "generator": {
      "type": "string",
      "description": "The generator this lib will use to build an API SDK (e.g.: typescript-fetch)",
      "alias": "g",
      "x-prompt": "Which OpenAPITool generator would you like to use? (https://github.com/OpenAPITools/openapi-generator)",
      "default": "typescript-fetch"
    },
    "additionalProperties": {
      "type": "string",
      "description": "Additional properties for the generator",
      "x-prompt": "Do you want to specify any additional properties for the generator? key1=value1,key2=value2 (https://openapi-generator.tech/docs/generators)",
      "default": ""
    }
  },
  "required": ["name", "generator"]
}
